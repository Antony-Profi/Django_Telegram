import logging
import telebot

from django.conf import settings
from telebot.async_telebot import AsyncTeleBot
from os import environ

from telebot.types import Message, ChatMemberUpdated
from webtelegram.apps.bot.middleware import CustomMiddleware
from webtelegram.services.database.bot_user_dao import update_or_create_tg_user
from webtelegram.services.database.invite_link_dao import update_invite_link, create_or_get_public_link
from webtelegram.services.database.telegram_chat_dao import update_telegram_chat, get_all_channels, \
    get_telegram_chat_by_chat_id
from webtelegram.services.database.telegram_subscriber_dao import (
    check_exist_subscriber_in_channel,
    update_or_create_subscriber
)
from webtelegram.services.utils.subscriber_status_parser import member_is_subscriber

bot = AsyncTeleBot(settings.BOT_TOKEN, parse_mode="HTML")

telebot.logger.setLevel(settings.LOG_LEVEL)

logger = logging.getLogger(__name__)

bot.setup_middleware(CustomMiddleware())


@bot.chat_member_handler()
async def chat_member_handler_bot(message: ChatMemberUpdated):
    channels_ids = [channel.chat_id async for channel in await get_all_channels()]
    if message.chat.id not in channels_ids:
        logger.info(f"!!! –ö–∞–Ω–∞–ª–∞ {message.chat.id} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö")
        return None

    telegram_chat = await update_telegram_chat(chat_data=message.chat)
    if not telegram_chat:
        logger.warning(f"–ß–∞—Ç —Å ID {message.chat.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    invite_link = message.invite_link
    logger.info(f"{invite_link=}")

    full_name = message.from_user.full_name
    logger.info(f"{full_name=}")

    username = message.from_user.username
    logger.info(f"{username=}")

    id = message.from_user.id
    logger.info(f"{id=}")

    invite_link_name = ""
    invite_link_url = ""

    try:
        invite_link_name = getattr(invite_link, "name")
        logger.info(f"{invite_link_name=}")

        invite_link_url = getattr(invite_link, "invite_link")
        logger.info(f"{invite_link_url=}")
    except AttributeError as err:
        logger.info(f"–ù–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {err}")
        # –ù–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∑–Ω–∞—á–∏—Ç —Å—Å—ã–ª–∫–∞ –æ–±—â–∞—è, —Å–æ–∑–¥–∞—ë–º –µ—ë
        invite_link_db = await create_or_get_public_link(
            telegram_chat=telegram_chat,
            chat_username=message.chat.username)
        # –ù–æ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–ª—è —Ç–µ—Ö –∫—Ç–æ —É–∂–µ –∫–æ–≥–¥–∞-—Ç–æ –∑–∞—Ö–æ–¥–∏–ª –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π.
        # –£ –Ω–∏—Ö —Ç–æ–∂–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Å—Å—ã–ª–∫–∏
    else:
        # –ó–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        invite_link_db, create_status = await update_invite_link(
            telegram_chat=telegram_chat,
            chat_invite_link_data=message.invite_link)

    subscribed = member_is_subscriber(chat_member_updated=message)
    subscriber_exist = await check_exist_subscriber_in_channel(chat_data=message.chat, user_data=message.from_user)
    if subscriber_exist is True:
        """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å—Å—ã–ª–∫—É –∫ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω"""
        await update_or_create_subscriber(
            chat_data=message.chat,
            user_data=message.from_user,
            subscribed=subscribed,
            invite_link=None)
    else:
        """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Ç–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ —Å—Å—ã–ª–∫–µ –ø—É–±–ª–∏—á–Ω–æ–π –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π"""
        await update_or_create_subscriber(
            chat_data=message.chat,
            user_data=message.from_user,
            subscribed=subscribed,
            invite_link=invite_link_db)

    if subscriber_exist is True:
        status_text = "üöÄ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å"
    elif subscribed is False:
        status_text = "ü´§ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å"
    else:
        status_text = "üòØ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    text_message = (f"–ö–∞–Ω–∞–ª: {telegram_chat.name}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                    f"–ò–º—è: {full_name}\n"
                    f"ID: {id}")

    if username:
        text_message += f"\n<b>–ù–∏–∫–Ω–µ–π–º</b>: @{username}"
    if invite_link_name:
        text_message += f"\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏: {invite_link_name}"
    if invite_link_url:
        text_message += f"\n<b>URL</b>: {invite_link_url}"
    if invite_link_db.notification is True:
        await bot.send_message(chat_id=settings.TELEGRAM_ID_ADMIN, text=text_message)


@bot.message_handler(commands=["help", "start"])
async def send_welcome(message):
    await bot.send_message(message.chat.id, 'Hi, I am EchoBot.\nJust write me something and I will repeat it!')
    await bot.send_message(message.chat.id, message.chat.id)


@bot.message_handler(func=lambda message: True)
async def echo_message(message):
    await bot.reply_to(message, message.text)
